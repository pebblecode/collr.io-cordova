/* @flow */
/* global ble */

import {connect} from 'react-redux';
import React, {Component, PropTypes} from 'react';
import Status from '../Status';

import logoImg from '../../img/logo.svg';
import profileImg from '../../img/profile.png';

import {fetchStatusesOnInterval} from '../../actions';

class App extends Component {

  componentWillMount(){
    document.addEventListener("deviceready", this.eventHandlers.bind(this), false);
  }

  eventHandlers(){
    window.ble.scan([],5,this.search.bind(this), this.error.bind(this));
  }

  constructor(props){
    super(props);
    this.state = {connected:false, sent:false, type:''};
  }

  componentDidMount() {

    console.log('XXX Component did mount');

    const { dispatch } = this.props;
    dispatch(fetchStatusesOnInterval);

    let success = (data) => {
      console.log('XXX CONNECT SUCCESS! YES!', data);
    };

    let failure = (error) => {
      console.log('XXX CONNECT fail :(', error);
    };

    // TESTING BLUETOOTH CONNECTION
    ble.connect(0xDE4ECAE96879, success, failure);

  }

  search(d){
    console.log('-----')
    console.log(d.name);
    console.log(d.id);
    console.log('-----')
    if(d.name === 'Adafruit Bluefruit LE'){
      this.connect(d);
    }
  }

  connect(d){
    var _this = this;
    bluetoothSerial.connect(d.id, (res) => {
      _this.setState({connected:true});
    }, this.error);
  }

  error(e){
    console.log('error', e);
  }

  render() {
    return (
<<<<<<< HEAD
      <div> 
        <h1>CONNECTED: {this.state.connected === true ? 'YES' : 'NO'}</h1>
        <button onClick={this.eventHandlers.bind(this)}>CONNECT</button>
        <h1>SENT: {this.state.sent === true ? 'YES' : 'NO'}</h1>
        <h2>TYPE: {this.state.type}</h2>
        <button onClick={this.unionjack.bind(this)}>Union Jack</button>
        <button onClick={this.animate2.bind(this)}>Animate 2</button>
        <button onClick={this.animate3.bind(this)}>Animate 3</button>
        <button onClick={this.blue.bind(this)}>BLUE</button>

       </div>
=======
      <div className={'page__home'}>
        <div className={'collr-wrapper'}>
            <header>
                <img src={'img/logo.svg'} alt="Collr-io Logo" />
            </header>
            <div>
                <img src={'img/profile.png'} alt="pet-profile"/>
                <h3>WINSTON</h3>
            </div>
            <button>Colour</button>
            <button>Animation</button>
        </div>
      </div>
>>>>>>> 8412dff9d8890c1b711cc764de5407b44171c6ec
    );
  }
  unionjack(){
      var _this = this;
      var data = new Uint8Array(5);
      data[0] = 0x21; // !
      data[1] = 0x42; // C
      data[2] = 0x31; // // upto 34
      data[3] = 0x30; // 5
      data[4] = 0x3B; // 5

      bluetoothSerial.write(data, (res) => {
        _this.setState({sent: true, type:'unionjack'});
      }, this.error);
  }

  animate2(){
      var _this = this;
      var data = new Uint8Array(5);
      data[0] = 0x21; // !
      data[1] = 0x42; // C
      data[2] = 0x32; // // upto 34
      data[3] = 0x30; // 5
      data[4] = 0x3C; // 5

      bluetoothSerial.write(data, (res) => {
        _this.setState({sent: true, type:'animate2'});
      }, this.error);
  }

  animate3(){
      var _this = this;
      var data = new Uint8Array(5);
      data[0] = 0x21; // !
      data[1] = 0x42; // C
      data[2] = 0x33; // // upto 34
      data[3] = 0x30; // 5
      data[4] = 0x3D; // 5

      bluetoothSerial.write(data, (res) => {
        _this.setState({sent: true, type:'animate3'});
      }, this.error);
  }


  blue(){
      var _this = this;
      var data = new Uint8Array(6);
      data[0] = 0x21; // !
      data[1] = 0x43; // C
      data[2] = 0x67; // 5
      data[3] = 0x3B; // 5
      data[4] = 0xFF; // 5
      data[5] = 0xFA;

      bluetoothSerial.write(data, (res) => {
        _this.setState({sent: true, type:'BLUE'});
      }, this.error);
  }
};

App.propTypes = {
  dispatch: PropTypes.func.isRequired,
  users: PropTypes.array.isRequired,
  isFetching: PropTypes.bool.isRequired
};

function mapStateToProps(state) {
  const {users, isFetching} = state;

  return {
    users,
    isFetching
  };
}

export default connect(mapStateToProps)(App);


